[cloudera@quickstart Desktop]$ cat start-hbase.sh 
sudo service zookeeper-server start
[cloudera@quickstart Desktop]$ cat Service\ Start\ Stop\ Commands.txt | grep -i hbase | grep -i start >> start-hbase.sh 
[cloudera@quickstart Desktop]$ cat start-hbase.sh 
sudo service zookeeper-server start
sudo service hbase-master start
sudo service hbase-regionserver start
sudo service hbase-thrift start
sudo service hbase-rest start
[cloudera@quickstart Desktop]$ sh start-hbase.sh 
JMX enabled by default
Using config: /etc/zookeeper/conf/zoo.cfg
Starting zookeeper ... already running as process 20840.
HBase master daemon is running                             [  OK  ]
Starting Hadoop HBase regionserver daemon: regionserver running as process 25576. Stop it first.
hbase-regionserver.
HBase thrift daemon is running                             [  OK  ]
HBase rest daemon is running                               [  OK  ]
[cloudera@quickstart Desktop]$ sudo jps
26240 Jps
18785 RunJar
17922 SecondaryNameNode
27011 Bootstrap
26723 Sqoop
18150 NodeManager
17767 NameNode
20840 QuorumPeerMain
25576 HRegionServer
18954 RunJar
25421 HMaster
21231 ThriftServer
18482 JobHistoryServer
21395 RESTServer
18356 ResourceManager
24278 org.eclipse.equinox.launcher_1.3.0.v20140415-2008.jar
17656 JournalNode
17529 DataNode
18075 Bootstrap
[cloudera@quickstart Desktop]$ ls
Cassendra Queries   Eclipse.desktop       Express.desktop            Kerberos.desktop  orders2.java                     start-hbase.sh  Start-YARN.sh~  Unsaved Document 1~
Cassendra Queries~  EclipseScala.desktop  jetbrains-idea-ce.desktop  MR Programs       Parcels.desktop                  Start-HDFS.sh~  test.txt        xmlDataSet.csv
derby.log           Enterprise.desktop    Kafka Commands             Old Firefox Data  Service Start Stop Commands.txt  Start-HIVE.sh~  UDF_jars        xmlDataSet.csv~
[cloudera@quickstart Desktop]$ cls
bash: cls: command not found
[cloudera@quickstart Desktop]$ clear

[cloudera@quickstart Desktop]$ cat Service\ Start\ Stop\ Commands.txt | grep -i zookeeper | grep -i start > start-hbase.sh 
[cloudera@quickstart Desktop]$ cat Service\ Start\ Stop\ Commands.txt | grep -i hbase | grep -i start >> start-hbase.sh 
[cloudera@quickstart Desktop]$ cat start-hbase.sh 
sudo service zookeeper-server start
sudo service hbase-master start
sudo service hbase-regionserver start
sudo service hbase-thrift start
sudo service hbase-rest start
[cloudera@quickstart Desktop]$ sh start-hbase.sh 
JMX enabled by default
Using config: /etc/zookeeper/conf/zoo.cfg
Starting zookeeper ... already running as process 20840.
HBase master daemon is running                             [  OK  ]
Starting Hadoop HBase regionserver daemon: regionserver running as process 25576. Stop it first.
hbase-regionserver.
HBase thrift daemon is running                             [  OK  ]
HBase rest daemon is running                               [  OK  ]
[cloudera@quickstart Desktop]$ cd /etc/hbase/conf
[cloudera@quickstart conf]$ pwd
/etc/hbase/conf
[cloudera@quickstart conf]$ ls
hadoop-metrics2-hbase.properties  hbase-env.cmd  hbase-env.sh  hbase-policy.xml  hbase-site.xml  log4j.properties  regionservers
[cloudera@quickstart conf]$ hadoop fs -ls /hbase/
Found 9 items
drwxr-xr-x   - hbase supergroup          0 2019-09-18 18:53 /hbase/.tmp
drwxr-xr-x   - hbase supergroup          0 2019-09-18 18:53 /hbase/MasterProcWALs
drwxr-xr-x   - hbase supergroup          0 2019-09-18 18:53 /hbase/WALs
drwxr-xr-x   - hbase supergroup          0 2019-09-18 18:59 /hbase/archive
drwxr-xr-x   - hbase supergroup          0 2019-09-18 18:53 /hbase/corrupt
drwxr-xr-x   - hbase supergroup          0 2018-04-05 09:38 /hbase/data
-rw-r--r--   1 hbase supergroup         42 2018-04-05 09:38 /hbase/hbase.id
-rw-r--r--   1 hbase supergroup          7 2018-04-05 09:38 /hbase/hbase.version
drwxr-xr-x   - hbase supergroup          0 2019-09-18 19:04 /hbase/oldWALs
[cloudera@quickstart conf]$ hadoop fs -ls /hbase/data/default
[cloudera@quickstart conf]$ hadoop fs -ls /hbase/data
Found 2 items
drwxr-xr-x   - hbase supergroup          0 2018-04-05 09:38 /hbase/data/default
drwxr-xr-x   - hbase supergroup          0 2018-04-05 09:38 /hbase/data/hbase
[cloudera@quickstart conf]$ hadoop fs -ls /hbase/data/hbase
Found 2 items
drwxr-xr-x   - hbase supergroup          0 2018-04-05 09:38 /hbase/data/hbase/meta
drwxr-xr-x   - hbase supergroup          0 2018-04-05 09:38 /hbase/data/hbase/namespace
[cloudera@quickstart conf]$ hadoop fs -ls /hbase/data/hbase/meta
Found 3 items
drwxr-xr-x   - hbase supergroup          0 2018-04-05 09:38 /hbase/data/hbase/meta/.tabledesc
drwxr-xr-x   - hbase supergroup          0 2018-04-05 09:38 /hbase/data/hbase/meta/.tmp
drwxr-xr-x   - hbase supergroup          0 2019-09-18 18:53 /hbase/data/hbase/meta/1588230740
[cloudera@quickstart conf]$ hadoop fs -ls /hbase/data/hbase/namespace
Found 3 items
drwxr-xr-x   - hbase supergroup          0 2018-04-05 09:38 /hbase/data/hbase/namespace/.tabledesc
drwxr-xr-x   - hbase supergroup          0 2018-04-05 09:38 /hbase/data/hbase/namespace/.tmp
drwxr-xr-x   - hbase supergroup          0 2019-09-16 18:45 /hbase/data/hbase/namespace/c08fa081dd35ee0c27bd6cf398624512
[cloudera@quickstart conf]$ hbase shell
2019-09-18 19:08:53,294 INFO  [main] Configuration.deprecation: hadoop.native.lib is deprecated. Instead, use io.native.lib.available
HBase Shell; enter 'help<RETURN>' for list of supported commands.
Type "exit<RETURN>" to leave the HBase Shell
Version 1.2.0-cdh5.15.0, rUnknown, Thu May 24 04:29:37 PDT 2018

hbase(main):001:0> help
HBase Shell, version 1.2.0-cdh5.15.0, rUnknown, Thu May 24 04:29:37 PDT 2018
Type 'help "COMMAND"', (e.g. 'help "get"' -- the quotes are necessary) for help on a specific command.
Commands are grouped. Type 'help "COMMAND_GROUP"', (e.g. 'help "general"') for help on a command group.

COMMAND GROUPS:
  Group name: general
  Commands: status, table_help, version, whoami

  Group name: ddl
  Commands: alter, alter_async, alter_status, create, describe, disable, disable_all, drop, drop_all, enable, enable_all, exists, get_table, is_disabled, is_enabled, list, locate_region, show_filters

  Group name: namespace
  Commands: alter_namespace, create_namespace, describe_namespace, drop_namespace, list_namespace, list_namespace_tables

  Group name: dml
  Commands: append, count, delete, deleteall, get, get_counter, get_splits, incr, put, scan, truncate, truncate_preserve

  Group name: tools
  Commands: assign, balance_switch, balancer, balancer_enabled, catalogjanitor_enabled, catalogjanitor_run, catalogjanitor_switch, close_region, compact, compact_mob, compact_rs, flush, is_in_maintenance_mode, major_compact, major_compact_mob, merge_region, move, normalize, normalizer_enabled, normalizer_switch, split, splitormerge_enabled, splitormerge_switch, trace, unassign, wal_roll, zk_dump

  Group name: replication
  Commands: add_peer, append_peer_tableCFs, disable_peer, disable_table_replication, enable_peer, enable_table_replication, get_peer_config, list_peer_configs, list_peers, list_replicated_tables, remove_peer, remove_peer_tableCFs, set_peer_tableCFs, show_peer_tableCFs, update_peer_config

  Group name: snapshots
  Commands: clone_snapshot, delete_all_snapshot, delete_snapshot, list_snapshots, restore_snapshot, snapshot

  Group name: configuration
  Commands: update_all_config, update_config

  Group name: quotas
  Commands: list_quotas, set_quota

  Group name: security
  Commands: grant, list_security_capabilities, revoke, user_permission

  Group name: procedures
  Commands: abort_procedure, list_procedures

  Group name: visibility labels
  Commands: add_labels, clear_auths, get_auths, list_labels, set_auths, set_visibility

  Group name: rsgroup
  Commands: add_rsgroup, balance_rsgroup, get_rsgroup, get_server_rsgroup, get_table_rsgroup, list_rsgroups, move_servers_rsgroup, move_tables_rsgroup, remove_rsgroup

SHELL USAGE:
Quote all names in HBase Shell such as table and column names.  Commas delimit
command parameters.  Type <RETURN> after entering a command to run it.
Dictionaries of configuration used in the creation and alteration of tables are
Ruby Hashes. They look like this:

  {'key1' => 'value1', 'key2' => 'value2', ...}

and are opened and closed with curley-braces.  Key/values are delimited by the
'=>' character combination.  Usually keys are predefined constants such as
NAME, VERSIONS, COMPRESSION, etc.  Constants do not need to be quoted.  Type
'Object.constants' to see a (messy) list of all constants in the environment.

If you are using binary keys or values and need to enter them in the shell, use
double-quote'd hexadecimal representation. For example:

  hbase> get 't1', "key\x03\x3f\xcd"
  hbase> get 't1', "key\003\023\011"
  hbase> put 't1', "test\xef\xff", 'f1:', "\x01\x33\x40"

The HBase shell is the (J)Ruby IRB with the above HBase-specific commands added.
For more on the HBase Shell, see http://hbase.apache.org/book.html
hbase(main):002:0> staus
NameError: undefined local variable or method `staus' for #<Object:0x5bcec67e>

hbase(main):003:0> status
1 active master, 0 backup masters, 1 servers, 0 dead, 2.0000 average load

hbase(main):004:0> version
1.2.0-cdh5.15.0, rUnknown, Thu May 24 04:29:37 PDT 2018

hbase(main):005:0> whoami
cloudera (auth:SIMPLE)
    groups: cloudera, default

hbase(main):006:0> list_namespace
NAMESPACE                                                                                                                                                                                     
default                                                                                                                                                                                       
hbase                                                                                                                                                                                         
2 row(s) in 0.1020 seconds

hbase(main):007:0> create_namespace 'july19'
0 row(s) in 0.1320 seconds

hbase(main):008:0> list_namespace_tables 'default'
TABLE                                                                                                                                                                                         
0 row(s) in 0.0380 seconds

hbase(main):009:0> list_namespace_tables 'july19'
TABLE                                                                                                                                                                                         
0 row(s) in 0.0070 seconds

hbase(main):010:0> list_namespace_tables 'hbase'
TABLE                                                                                                                                                                                         
meta                                                                                                                                                                                          
namespace                                                                                                                                                                                     
2 row(s) in 0.0220 seconds

hbase(main):011:0> list_namespace
NAMESPACE                                                                                                                                                                                     
default                                                                                                                                                                                       
hbase                                                                                                                                                                                         
july19                                                                                                                                                                                        
3 row(s) in 0.0660 seconds

hbase(main):012:0> drop july19
NameError: undefined local variable or method `july19' for #<Object:0x5bcec67e>

hbase(main):013:0> delete july19
NameError: undefined local variable or method `july19' for #<Object:0x5bcec67e>

hbase(main):014:0> delete 'july19'

ERROR: wrong number of arguments (1 for 2)

Put a delete cell value at specified table/row/column and optionally
timestamp coordinates.  Deletes must match the deleted cell's
coordinates exactly.  When scanning, a delete cell suppresses older
versions. To delete a cell from  't1' at row 'r1' under column 'c1'
marked with the time 'ts1', do:

  hbase> delete 'ns1:t1', 'r1', 'c1', ts1
  hbase> delete 't1', 'r1', 'c1', ts1
  hbase> delete 't1', 'r1', 'c1', ts1, {VISIBILITY=>'PRIVATE|SECRET'}

The same command can also be run on a table reference. Suppose you had a reference
t to table 't1', the corresponding command would be:

  hbase> t.delete 'r1', 'c1',  ts1
  hbase> t.delete 'r1', 'c1',  ts1, {VISIBILITY=>'PRIVATE|SECRET'}


hbase(main):015:0> drop_namespace 'july19'
0 row(s) in 0.0870 seconds

hbase(main):016:0> create_namespace 'aug19'
0 row(s) in 0.0430 seconds

hbase(main):017:0> create 'emp-tbl-name','name-col-family1','contacts-col-family2','ids-col-family3','banks-col-family4'
0 row(s) in 1.4540 seconds

=> Hbase::Table - emp-tbl-name
hbase(main):018:0> describe 'emp-tbl-name'
Table emp-tbl-name is ENABLED                                                                                                                                                                 
emp-tbl-name                                                                                                                                                                                  
COLUMN FAMILIES DESCRIPTION                                                                                                                                                                   
{NAME => 'banks-col-family4', BLOOMFILTER => 'ROW', VERSIONS => '1', IN_MEMORY => 'false', KEEP_DELETED_CELLS => 'FALSE', DATA_BLOCK_ENCODING => 'NONE', TTL => 'FOREVER', COMPRESSION => 'NON
E', MIN_VERSIONS => '0', BLOCKCACHE => 'true', BLOCKSIZE => '65536', REPLICATION_SCOPE => '0'}                                                                                                
{NAME => 'contacts-col-family2', BLOOMFILTER => 'ROW', VERSIONS => '1', IN_MEMORY => 'false', KEEP_DELETED_CELLS => 'FALSE', DATA_BLOCK_ENCODING => 'NONE', TTL => 'FOREVER', COMPRESSION => '
NONE', MIN_VERSIONS => '0', BLOCKCACHE => 'true', BLOCKSIZE => '65536', REPLICATION_SCOPE => '0'}                                                                                             
{NAME => 'ids-col-family3', BLOOMFILTER => 'ROW', VERSIONS => '1', IN_MEMORY => 'false', KEEP_DELETED_CELLS => 'FALSE', DATA_BLOCK_ENCODING => 'NONE', TTL => 'FOREVER', COMPRESSION => 'NONE'
, MIN_VERSIONS => '0', BLOCKCACHE => 'true', BLOCKSIZE => '65536', REPLICATION_SCOPE => '0'}                                                                                                  
{NAME => 'name-col-family1', BLOOMFILTER => 'ROW', VERSIONS => '1', IN_MEMORY => 'false', KEEP_DELETED_CELLS => 'FALSE', DATA_BLOCK_ENCODING => 'NONE', TTL => 'FOREVER', COMPRESSION => 'NONE
', MIN_VERSIONS => '0', BLOCKCACHE => 'true', BLOCKSIZE => '65536', REPLICATION_SCOPE => '0'}                                                                                                 
4 row(s) in 0.2160 seconds

hbase(main):019:0> help create

ERROR: wrong number of arguments (0 for 1)

Creates a table. Pass a table name, and a set of column family
specifications (at least one), and, optionally, table configuration.
Column specification can be a simple string (name), or a dictionary
(dictionaries are described below in main help output), necessarily 
including NAME attribute. 
Examples:

Create a table with namespace=ns1 and table qualifier=t1
  hbase> create 'ns1:t1', {NAME => 'f1', VERSIONS => 5}

Create a table with namespace=default and table qualifier=t1
  hbase> create 't1', {NAME => 'f1'}, {NAME => 'f2'}, {NAME => 'f3'}
  hbase> # The above in shorthand would be the following:
  hbase> create 't1', 'f1', 'f2', 'f3'
  hbase> create 't1', {NAME => 'f1', VERSIONS => 1, TTL => 2592000, BLOCKCACHE => true}
  hbase> create 't1', {NAME => 'f1', CONFIGURATION => {'hbase.hstore.blockingStoreFiles' => '10'}}
  hbase> create 't1', {NAME => 'f1', IS_MOB => true, MOB_THRESHOLD => 1000000, MOB_COMPACT_PARTITION_POLICY => 'weekly'}

Table configuration options can be put at the end.
Examples:

  hbase> create 'ns1:t1', 'f1', SPLITS => ['10', '20', '30', '40']
  hbase> create 't1', 'f1', SPLITS => ['10', '20', '30', '40']
  hbase> create 't1', 'f1', SPLITS_FILE => 'splits.txt', OWNER => 'johndoe'
  hbase> create 't1', {NAME => 'f1', VERSIONS => 5}, METADATA => { 'mykey' => 'myvalue' }
  hbase> # Optionally pre-split the table into NUMREGIONS, using
  hbase> # SPLITALGO ("HexStringSplit", "UniformSplit" or classname)
  hbase> create 't1', 'f1', {NUMREGIONS => 15, SPLITALGO => 'HexStringSplit'}
  hbase> create 't1', 'f1', {NUMREGIONS => 15, SPLITALGO => 'HexStringSplit', REGION_REPLICATION => 2, CONFIGURATION => {'hbase.hregion.scan.loadColumnFamiliesOnDemand' => 'true'}}
  hbase> create 't1', {NAME => 'f1', DFS_REPLICATION => 1}

You can also keep around a reference to the created table:

  hbase> t1 = create 't1', 'f1'

Which gives you a reference to the table named 't1', on which you can then
call methods.


HBase Shell, version 1.2.0-cdh5.15.0, rUnknown, Thu May 24 04:29:37 PDT 2018
Type 'help "COMMAND"', (e.g. 'help "get"' -- the quotes are necessary) for help on a specific command.
Commands are grouped. Type 'help "COMMAND_GROUP"', (e.g. 'help "general"') for help on a command group.

COMMAND GROUPS:
  Group name: general
  Commands: status, table_help, version, whoami

  Group name: ddl
  Commands: alter, alter_async, alter_status, create, describe, disable, disable_all, drop, drop_all, enable, enable_all, exists, get_table, is_disabled, is_enabled, list, locate_region, show_filters

  Group name: namespace
  Commands: alter_namespace, create_namespace, describe_namespace, drop_namespace, list_namespace, list_namespace_tables

  Group name: dml
  Commands: append, count, delete, deleteall, get, get_counter, get_splits, incr, put, scan, truncate, truncate_preserve

  Group name: tools
  Commands: assign, balance_switch, balancer, balancer_enabled, catalogjanitor_enabled, catalogjanitor_run, catalogjanitor_switch, close_region, compact, compact_mob, compact_rs, flush, is_in_maintenance_mode, major_compact, major_compact_mob, merge_region, move, normalize, normalizer_enabled, normalizer_switch, split, splitormerge_enabled, splitormerge_switch, trace, unassign, wal_roll, zk_dump

  Group name: replication
  Commands: add_peer, append_peer_tableCFs, disable_peer, disable_table_replication, enable_peer, enable_table_replication, get_peer_config, list_peer_configs, list_peers, list_replicated_tables, remove_peer, remove_peer_tableCFs, set_peer_tableCFs, show_peer_tableCFs, update_peer_config

  Group name: snapshots
  Commands: clone_snapshot, delete_all_snapshot, delete_snapshot, list_snapshots, restore_snapshot, snapshot

  Group name: configuration
  Commands: update_all_config, update_config

  Group name: quotas
  Commands: list_quotas, set_quota

  Group name: security
  Commands: grant, list_security_capabilities, revoke, user_permission

  Group name: procedures
  Commands: abort_procedure, list_procedures

  Group name: visibility labels
  Commands: add_labels, clear_auths, get_auths, list_labels, set_auths, set_visibility

  Group name: rsgroup
  Commands: add_rsgroup, balance_rsgroup, get_rsgroup, get_server_rsgroup, get_table_rsgroup, list_rsgroups, move_servers_rsgroup, move_tables_rsgroup, remove_rsgroup

SHELL USAGE:
Quote all names in HBase Shell such as table and column names.  Commas delimit
command parameters.  Type <RETURN> after entering a command to run it.
Dictionaries of configuration used in the creation and alteration of tables are
Ruby Hashes. They look like this:

  {'key1' => 'value1', 'key2' => 'value2', ...}

and are opened and closed with curley-braces.  Key/values are delimited by the
'=>' character combination.  Usually keys are predefined constants such as
NAME, VERSIONS, COMPRESSION, etc.  Constants do not need to be quoted.  Type
'Object.constants' to see a (messy) list of all constants in the environment.

If you are using binary keys or values and need to enter them in the shell, use
double-quote'd hexadecimal representation. For example:

  hbase> get 't1', "key\x03\x3f\xcd"
  hbase> get 't1', "key\003\023\011"
  hbase> put 't1', "test\xef\xff", 'f1:', "\x01\x33\x40"

The HBase shell is the (J)Ruby IRB with the above HBase-specific commands added.
For more on the HBase Shell, see http://hbase.apache.org/book.html
hbase(main):020:0> list_namespace
NAMESPACE                                                                                                                                                                                     
aug19                                                                                                                                                                                         
default                                                                                                                                                                                       
hbase                                                                                                                                                                                         
3 row(s) in 0.0390 seconds

hbase(main):021:0> list_namespace 'aug19'
NAMESPACE                                                                                                                                                                                     
aug19                                                                                                                                                                                         
1 row(s) in 0.0170 seconds

hbase(main):022:0> list_namespace_tables 'aug19'
TABLE                                                                                                                                                                                         
0 row(s) in 0.0100 seconds

hbase(main):023:0> list_namespace_tables 'default'
TABLE                                                                                                                                                                                         
emp-tbl-name                                                                                                                                                                                  
1 row(s) in 0.0110 seconds

hbase(main):024:0> create 'aug19:emp-tbl-name','name-col-family1','contacts-col-family2','ids-col-family3','banks-col-family4'
0 row(s) in 2.3000 seconds

=> Hbase::Table - aug19:emp-tbl-name
hbase(main):025:0> list_namespace_tables 'aug19'
TABLE                                                                                                                                                                                         
emp-tbl-name                                                                                                                                                                                  
1 row(s) in 0.0220 seconds

hbase(main):026:0> create 'aug19:emp-tbl-name-custom-version','{NAME=> 'name-col-family1', VERSIONS => 5},'id-col-fami2'
hbase(main):027:0' 
hbase(main):028:0' 
hbase(main):029:0' ;
hbase(main):030:0' list_namespace_tables 'aug19'
hbase(main):031:0' list_namespace_tables 'default'
hbase(main):032:0' [cloudera@quickstart conf]$ hbase shell
2019-09-18 19:40:12,869 INFO  [main] Configuration.deprecation: hadoop.native.lib is deprecated. Instead, use io.native.lib.available
HBase Shell; enter 'help<RETURN>' for list of supported commands.
Type "exit<RETURN>" to leave the HBase Shell
Version 1.2.0-cdh5.15.0, rUnknown, Thu May 24 04:29:37 PDT 2018

hbase(main):001:0> list
TABLE                                                                                                                                                                                         
aug19:emp-tbl-name                                                                                                                                                                            
emp-tbl-name                                                                                                                                                                                  
2 row(s) in 0.6000 seconds

=> ["aug19:emp-tbl-name", "emp-tbl-name"]
hbase(main):002:0> count 'emp-tbl-name'
0 row(s) in 0.2660 seconds

=> 0
hbase(main):003:0> scan 'emp-tbl-name'
ROW                                              COLUMN+CELL                                                                                                                                  
0 row(s) in 0.0300 seconds

hbase(main):004:0> put 'emp-tbl-name',100,'names:fname','nayana'

ERROR: Unknown column family! Valid column names: banks-col-family4:*, contacts-col-family2:*, ids-col-family3:*, name-col-family1:*

Put a cell 'value' at specified table/row/column and optionally
timestamp coordinates.  To put a cell value into table 'ns1:t1' or 't1'
at row 'r1' under column 'c1' marked with the time 'ts1', do:

  hbase> put 'ns1:t1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value', ts1
  hbase> put 't1', 'r1', 'c1', 'value', {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {VISIBILITY=>'PRIVATE|SECRET'}

The same commands also can be run on a table reference. Suppose you had a reference
t to table 't1', the corresponding command would be:

  hbase> t.put 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}


hbase(main):005:0> put 'emp-tbl-name',100,'name-col-family1:fname','nayana'
0 row(s) in 0.0120 seconds

hbase(main):006:0> scan 'emp-tbl-name'
ROW                                              COLUMN+CELL                                                                                                                                  
 100                                             column=name-col-family1:fname, timestamp=1568860971535, value=nayana                                                                         
1 row(s) in 0.0180 seconds

hbase(main):007:0> put 'emp-tbl-name',102,'name-col-family1:fname','nayana','ids-col-family3',33

ERROR: undefined method `any?' for 33:Fixnum

Put a cell 'value' at specified table/row/column and optionally
timestamp coordinates.  To put a cell value into table 'ns1:t1' or 't1'
at row 'r1' under column 'c1' marked with the time 'ts1', do:

  hbase> put 'ns1:t1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value', ts1
  hbase> put 't1', 'r1', 'c1', 'value', {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {VISIBILITY=>'PRIVATE|SECRET'}

The same commands also can be run on a table reference. Suppose you had a reference
t to table 't1', the corresponding command would be:

  hbase> t.put 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}


hbase(main):008:0> put 'emp-tbl-name',102,'name-col-family1:fname','nayana','ids-col-family3','33'

ERROR: no method 'add' for arguments (org.jruby.java.proxies.ArrayJavaProxy,org.jruby.java.proxies.ArrayJavaProxy,org.jruby.RubyString,org.jruby.java.proxies.ArrayJavaProxy) on Java::OrgApacheHadoopHbaseClient::Put
  available overloads:
    (byte[],java.nio.ByteBuffer,long,java.nio.ByteBuffer)
    (byte[],byte[],long,byte[])

Put a cell 'value' at specified table/row/column and optionally
timestamp coordinates.  To put a cell value into table 'ns1:t1' or 't1'
at row 'r1' under column 'c1' marked with the time 'ts1', do:

  hbase> put 'ns1:t1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value', ts1
  hbase> put 't1', 'r1', 'c1', 'value', {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {VISIBILITY=>'PRIVATE|SECRET'}

The same commands also can be run on a table reference. Suppose you had a reference
t to table 't1', the corresponding command would be:

  hbase> t.put 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}


hbase(main):009:0> put 'emp-tbl-name',102,'name-col-family1:fname','nayana','ids-col-family3:pan','ABC33'

ERROR: no method 'add' for arguments (org.jruby.java.proxies.ArrayJavaProxy,org.jruby.java.proxies.ArrayJavaProxy,org.jruby.RubyString,org.jruby.java.proxies.ArrayJavaProxy) on Java::OrgApacheHadoopHbaseClient::Put
  available overloads:
    (byte[],java.nio.ByteBuffer,long,java.nio.ByteBuffer)
    (byte[],byte[],long,byte[])

Put a cell 'value' at specified table/row/column and optionally
timestamp coordinates.  To put a cell value into table 'ns1:t1' or 't1'
at row 'r1' under column 'c1' marked with the time 'ts1', do:

  hbase> put 'ns1:t1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value', ts1
  hbase> put 't1', 'r1', 'c1', 'value', {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {VISIBILITY=>'PRIVATE|SECRET'}

The same commands also can be run on a table reference. Suppose you had a reference
t to table 't1', the corresponding command would be:

  hbase> t.put 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}


hbase(main):010:0> put 'emp-tbl-name',102,'ids-col-family3:pan','ABC33'
0 row(s) in 0.0130 seconds

hbase(main):011:0> put 'emp-tbl-name',102,'ids-col-family3:pan','ABC33'
0 row(s) in 0.0220 seconds

hbase(main):012:0> scan 'emp-tbl-name'
ROW                                              COLUMN+CELL                                                                                                                                  
 100                                             column=name-col-family1:fname, timestamp=1568860971535, value=nayana                                                                         
 102                                             column=ids-col-family3:pan, timestamp=1568861146643, value=ABC33                                                                             
2 row(s) in 0.0350 seconds

hbase(main):013:0> put 'emp-tbl-name',99,'name-col-family1:fname','nayana','ids-col-family3:pan','ABC33'

ERROR: no method 'add' for arguments (org.jruby.java.proxies.ArrayJavaProxy,org.jruby.java.proxies.ArrayJavaProxy,org.jruby.RubyString,org.jruby.java.proxies.ArrayJavaProxy) on Java::OrgApacheHadoopHbaseClient::Put
  available overloads:
    (byte[],java.nio.ByteBuffer,long,java.nio.ByteBuffer)
    (byte[],byte[],long,byte[])

Put a cell 'value' at specified table/row/column and optionally
timestamp coordinates.  To put a cell value into table 'ns1:t1' or 't1'
at row 'r1' under column 'c1' marked with the time 'ts1', do:

  hbase> put 'ns1:t1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value', ts1
  hbase> put 't1', 'r1', 'c1', 'value', {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {VISIBILITY=>'PRIVATE|SECRET'}

The same commands also can be run on a table reference. Suppose you had a reference
t to table 't1', the corresponding command would be:

  hbase> t.put 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}


hbase(main):014:0> get 'emp-tbl-name'

ERROR: wrong number of arguments (1 for 2)

Get row or cell contents; pass table name, row, and optionally
a dictionary of column(s), timestamp, timerange and versions. Examples:

  hbase> get 'ns1:t1', 'r1'
  hbase> get 't1', 'r1'
  hbase> get 't1', 'r1', {TIMERANGE => [ts1, ts2]}
  hbase> get 't1', 'r1', {COLUMN => 'c1'}
  hbase> get 't1', 'r1', {COLUMN => ['c1', 'c2', 'c3']}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMESTAMP => ts1}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMERANGE => [ts1, ts2], VERSIONS => 4}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMESTAMP => ts1, VERSIONS => 4}
  hbase> get 't1', 'r1', {FILTER => "ValueFilter(=, 'binary:abc')"}
  hbase> get 't1', 'r1', 'c1'
  hbase> get 't1', 'r1', 'c1', 'c2'
  hbase> get 't1', 'r1', ['c1', 'c2']
  hbase> get 't1', 'r1', {COLUMN => 'c1', ATTRIBUTES => {'mykey'=>'myvalue'}}
  hbase> get 't1', 'r1', {COLUMN => 'c1', AUTHORIZATIONS => ['PRIVATE','SECRET']}
  hbase> get 't1', 'r1', {CONSISTENCY => 'TIMELINE'}
  hbase> get 't1', 'r1', {CONSISTENCY => 'TIMELINE', REGION_REPLICA_ID => 1}

Besides the default 'toStringBinary' format, 'get' also supports custom formatting by
column.  A user can define a FORMATTER by adding it to the column name in the get
specification.  The FORMATTER can be stipulated: 

 1. either as a org.apache.hadoop.hbase.util.Bytes method name (e.g, toInt, toString)
 2. or as a custom class followed by method name: e.g. 'c(MyFormatterClass).format'.

Example formatting cf:qualifier1 and cf:qualifier2 both as Integers: 
  hbase> get 't1', 'r1' {COLUMN => ['cf:qualifier1:toInt',
    'cf:qualifier2:c(org.apache.hadoop.hbase.util.Bytes).toInt'] } 

Note that you can specify a FORMATTER by column only (cf:qualifier).  You cannot specify
a FORMATTER for all columns of a column family.
    
The same commands also can be run on a reference to a table (obtained via get_table or
create_table). Suppose you had a reference t to table 't1', the corresponding commands
would be:

  hbase> t.get 'r1'
  hbase> t.get 'r1', {TIMERANGE => [ts1, ts2]}
  hbase> t.get 'r1', {COLUMN => 'c1'}
  hbase> t.get 'r1', {COLUMN => ['c1', 'c2', 'c3']}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMESTAMP => ts1}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMERANGE => [ts1, ts2], VERSIONS => 4}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMESTAMP => ts1, VERSIONS => 4}
  hbase> t.get 'r1', {FILTER => "ValueFilter(=, 'binary:abc')"}
  hbase> t.get 'r1', 'c1'
  hbase> t.get 'r1', 'c1', 'c2'
  hbase> t.get 'r1', ['c1', 'c2']
  hbase> t.get 'r1', {CONSISTENCY => 'TIMELINE'}
  hbase> t.get 'r1', {CONSISTENCY => 'TIMELINE', REGION_REPLICA_ID => 1}


hbase(main):015:0> get 'emp-tbl-name',100
COLUMN                                           CELL                                                                                                                                         
 name-col-family1:fname                          timestamp=1568860971535, value=nayana                                                                                                        
1 row(s) in 0.0240 seconds

hbase(main):016:0> get 'emp-tbl-name',100,'ids-col-family3:pan'
COLUMN                                           CELL                                                                                                                                         
0 row(s) in 0.0150 seconds

hbase(main):017:0> scan 'emp-tbl-name'
ROW                                              COLUMN+CELL                                                                                                                                  
 100                                             column=name-col-family1:fname, timestamp=1568860971535, value=nayana                                                                         
 102                                             column=ids-col-family3:pan, timestamp=1568861146643, value=ABC33                                                                             
2 row(s) in 0.0120 seconds

hbase(main):018:0> get 'emp-tbl-name',102,'ids-col-family3:pan'
COLUMN                                           CELL                                                                                                                                         
 ids-col-family3:pan                             timestamp=1568861146643, value=ABC33                                                                                                         
1 row(s) in 0.0050 seconds

hbase(main):019:0> put 'emp-tbl-name',99,'name-col-family1:fname','nbm','ids-col-family3:pan','ABC33'

ERROR: no method 'add' for arguments (org.jruby.java.proxies.ArrayJavaProxy,org.jruby.java.proxies.ArrayJavaProxy,org.jruby.RubyString,org.jruby.java.proxies.ArrayJavaProxy) on Java::OrgApacheHadoopHbaseClient::Put
  available overloads:
    (byte[],java.nio.ByteBuffer,long,java.nio.ByteBuffer)
    (byte[],byte[],long,byte[])

Put a cell 'value' at specified table/row/column and optionally
timestamp coordinates.  To put a cell value into table 'ns1:t1' or 't1'
at row 'r1' under column 'c1' marked with the time 'ts1', do:

  hbase> put 'ns1:t1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value', ts1
  hbase> put 't1', 'r1', 'c1', 'value', {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {VISIBILITY=>'PRIVATE|SECRET'}

The same commands also can be run on a table reference. Suppose you had a reference
t to table 't1', the corresponding command would be:

  hbase> t.put 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}


hbase(main):020:0> delete 'emp-tbl-name',102,'ids-col-family3:pan'
0 row(s) in 0.0810 seconds

hbase(main):021:0> get 'emp-tbl-name',102,'ids-col-family3:pan'
COLUMN                                           CELL                                                                                                                                         
 ids-col-family3:pan                             timestamp=1568861110875, value=ABC33                                                                                                         
1 row(s) in 0.0120 seconds

hbase(main):022:0> scan 'emp-tbl-name'
ROW                                              COLUMN+CELL                                                                                                                                  
 100                                             column=name-col-family1:fname, timestamp=1568860971535, value=nayana                                                                         
 102                                             column=ids-col-family3:pan, timestamp=1568861110875, value=ABC33                                                                             
2 row(s) in 0.0280 seconds

hbase(main):023:0> delete 'emp-tbl-name',102,'ids-col-family3:pan'
0 row(s) in 0.0140 seconds

hbase(main):024:0> get 'emp-tbl-name',102,'ids-col-family3:pan'
COLUMN                                           CELL                                                                                                                                         
0 row(s) in 0.0120 seconds

hbase(main):025:0> put 'emp-tbl-name',99,'ids-col-family3:pan','ABC33'
0 row(s) in 0.0080 seconds

hbase(main):026:0> get 'emp-tbl-name',102,'ids-col-family3:pan'
COLUMN                                           CELL                                                                                                                                         
0 row(s) in 0.0150 seconds

hbase(main):027:0> get 'emp-tbl-name',99,'ids-col-family3:pan'
COLUMN                                           CELL                                                                                                                                         
 ids-col-family3:pan                             timestamp=1568861551612, value=ABC33                                                                                                         
1 row(s) in 0.0050 seconds

hbase(main):028:0> deleteall 'emp-tbl-name',99,'ids-col-family3:pan'
0 row(s) in 0.0060 seconds

hbase(main):029:0> get 'emp-tbl-name',99,'ids-col-family3:pan'
COLUMN                                           CELL                                                                                                                                         
0 row(s) in 0.0320 seconds

hbase(main):030:0> drop 'emp-tbl-name'

ERROR: Table emp-tbl-name is enabled. Disable it first.

Drop the named table. Table must first be disabled:
  hbase> drop 't1'
  hbase> drop 'ns1:t1'


hbase(main):031:0> is_enabled 'emp-tbl-name'
true                                                                                                                                                                                          
0 row(s) in 0.0260 seconds

hbase(main):032:0> disable 'emp-tbl-name'
0 row(s) in 2.3920 seconds

hbase(main):033:0> is_enabled 'emp-tbl-name'
false                                                                                                                                                                                         
0 row(s) in 0.0340 seconds

hbase(main):034:0> enable 'emp-tbl-name'
0 row(s) in 1.3340 seconds

hbase(main):035:0> get 'emp-tbl-name',99,'ids-col-family3:pan'
COLUMN                                           CELL                                                                                                                                         
0 row(s) in 0.0170 seconds

hbase(main):036:0> put 'emp-tbl-name',99,'name-col-family1:fname','nbm','ids-col-family3:pan','ABC33'

ERROR: no method 'add' for arguments (org.jruby.java.proxies.ArrayJavaProxy,org.jruby.java.proxies.ArrayJavaProxy,org.jruby.RubyString,org.jruby.java.proxies.ArrayJavaProxy) on Java::OrgApacheHadoopHbaseClient::Put
  available overloads:
    (byte[],java.nio.ByteBuffer,long,java.nio.ByteBuffer)
    (byte[],byte[],long,byte[])

Put a cell 'value' at specified table/row/column and optionally
timestamp coordinates.  To put a cell value into table 'ns1:t1' or 't1'
at row 'r1' under column 'c1' marked with the time 'ts1', do:

  hbase> put 'ns1:t1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value', ts1
  hbase> put 't1', 'r1', 'c1', 'value', {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {VISIBILITY=>'PRIVATE|SECRET'}

The same commands also can be run on a table reference. Suppose you had a reference
t to table 't1', the corresponding command would be:

  hbase> t.put 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}


hbase(main):037:0> create 'custom-version-tbl',{ NAME => 'cf1',VERSIONS = '3' }, 'cf2' , 'cf3'
SyntaxError: (hbase):37: syntax error, unexpected tRCURLY

create 'custom-version-tbl',{ NAME => 'cf1',VERSIONS = '3' }, 'cf2' , 'cf3'
                                                           ^

hbase(main):038:0> create 'custom-version-tbl',{ NAME => 'cf1',VERSIONS = '3'}, 'cf2' , 'cf3'
SyntaxError: (hbase):38: syntax error, unexpected tRCURLY

create 'custom-version-tbl',{ NAME => 'cf1',VERSIONS = '3'}, 'cf2' , 'cf3'
                                                          ^

hbase(main):039:0> create 'custom-version-tbl',{ NAME => 'cf1',VERSIONS => '3'}, 'cf2' , 'cf3'
0 row(s) in 1.2560 seconds

=> Hbase::Table - custom-version-tbl
hbase(main):040:0> describe 'custom-version-tbl'
Table custom-version-tbl is ENABLED                                                                                                                                                           
custom-version-tbl                                                                                                                                                                            
COLUMN FAMILIES DESCRIPTION                                                                                                                                                                   
{NAME => 'cf1', BLOOMFILTER => 'ROW', VERSIONS => '3', IN_MEMORY => 'false', KEEP_DELETED_CELLS => 'FALSE', DATA_BLOCK_ENCODING => 'NONE', TTL => 'FOREVER', COMPRESSION => 'NONE', MIN_VERSIO
NS => '0', BLOCKCACHE => 'true', BLOCKSIZE => '65536', REPLICATION_SCOPE => '0'}                                                                                                              
{NAME => 'cf2', BLOOMFILTER => 'ROW', VERSIONS => '1', IN_MEMORY => 'false', KEEP_DELETED_CELLS => 'FALSE', DATA_BLOCK_ENCODING => 'NONE', TTL => 'FOREVER', COMPRESSION => 'NONE', MIN_VERSIO
NS => '0', BLOCKCACHE => 'true', BLOCKSIZE => '65536', REPLICATION_SCOPE => '0'}                                                                                                              
{NAME => 'cf3', BLOOMFILTER => 'ROW', VERSIONS => '1', IN_MEMORY => 'false', KEEP_DELETED_CELLS => 'FALSE', DATA_BLOCK_ENCODING => 'NONE', TTL => 'FOREVER', COMPRESSION => 'NONE', MIN_VERSIO
NS => '0', BLOCKCACHE => 'true', BLOCKSIZE => '65536', REPLICATION_SCOPE => '0'}                                                                                                              
3 row(s) in 0.0580 seconds

hbase(main):041:0> put 'custom-version-tbl',100,'cf1:c1','v1'
0 row(s) in 0.0220 seconds

hbase(main):042:0> scan 'custom-version-tbl'
ROW                                              COLUMN+CELL                                                                                                                                  
 100                                             column=cf1:c1, timestamp=1568861991713, value=v1                                                                                             
1 row(s) in 0.0220 seconds

hbase(main):043:0> get 'custom-version-tbl'

ERROR: wrong number of arguments (1 for 2)

Get row or cell contents; pass table name, row, and optionally
a dictionary of column(s), timestamp, timerange and versions. Examples:

  hbase> get 'ns1:t1', 'r1'
  hbase> get 't1', 'r1'
  hbase> get 't1', 'r1', {TIMERANGE => [ts1, ts2]}
  hbase> get 't1', 'r1', {COLUMN => 'c1'}
  hbase> get 't1', 'r1', {COLUMN => ['c1', 'c2', 'c3']}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMESTAMP => ts1}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMERANGE => [ts1, ts2], VERSIONS => 4}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMESTAMP => ts1, VERSIONS => 4}
  hbase> get 't1', 'r1', {FILTER => "ValueFilter(=, 'binary:abc')"}
  hbase> get 't1', 'r1', 'c1'
  hbase> get 't1', 'r1', 'c1', 'c2'
  hbase> get 't1', 'r1', ['c1', 'c2']
  hbase> get 't1', 'r1', {COLUMN => 'c1', ATTRIBUTES => {'mykey'=>'myvalue'}}
  hbase> get 't1', 'r1', {COLUMN => 'c1', AUTHORIZATIONS => ['PRIVATE','SECRET']}
  hbase> get 't1', 'r1', {CONSISTENCY => 'TIMELINE'}
  hbase> get 't1', 'r1', {CONSISTENCY => 'TIMELINE', REGION_REPLICA_ID => 1}

Besides the default 'toStringBinary' format, 'get' also supports custom formatting by
column.  A user can define a FORMATTER by adding it to the column name in the get
specification.  The FORMATTER can be stipulated: 

 1. either as a org.apache.hadoop.hbase.util.Bytes method name (e.g, toInt, toString)
 2. or as a custom class followed by method name: e.g. 'c(MyFormatterClass).format'.

Example formatting cf:qualifier1 and cf:qualifier2 both as Integers: 
  hbase> get 't1', 'r1' {COLUMN => ['cf:qualifier1:toInt',
    'cf:qualifier2:c(org.apache.hadoop.hbase.util.Bytes).toInt'] } 

Note that you can specify a FORMATTER by column only (cf:qualifier).  You cannot specify
a FORMATTER for all columns of a column family.
    
The same commands also can be run on a reference to a table (obtained via get_table or
create_table). Suppose you had a reference t to table 't1', the corresponding commands
would be:

  hbase> t.get 'r1'
  hbase> t.get 'r1', {TIMERANGE => [ts1, ts2]}
  hbase> t.get 'r1', {COLUMN => 'c1'}
  hbase> t.get 'r1', {COLUMN => ['c1', 'c2', 'c3']}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMESTAMP => ts1}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMERANGE => [ts1, ts2], VERSIONS => 4}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMESTAMP => ts1, VERSIONS => 4}
  hbase> t.get 'r1', {FILTER => "ValueFilter(=, 'binary:abc')"}
  hbase> t.get 'r1', 'c1'
  hbase> t.get 'r1', 'c1', 'c2'
  hbase> t.get 'r1', ['c1', 'c2']
  hbase> t.get 'r1', {CONSISTENCY => 'TIMELINE'}
  hbase> t.get 'r1', {CONSISTENCY => 'TIMELINE', REGION_REPLICA_ID => 1}


hbase(main):044:0> scan 'custom-version-tbl'
ROW                                              COLUMN+CELL                                                                                                                                  
 100                                             column=cf1:c1, timestamp=1568861991713, value=v1                                                                                             
1 row(s) in 0.0150 seconds

hbase(main):045:0> get 'custom-version-tbl',100
COLUMN                                           CELL                                                                                                                                         
 cf1:c1                                          timestamp=1568861991713, value=v1                                                                                                            
1 row(s) in 0.0160 seconds

hbase(main):046:0> put 'custom-version-tbl',100,'cf1:c1','v2'
0 row(s) in 0.0090 seconds

hbase(main):047:0> get 'custom-version-tbl',100 , {COLUMN => 'cf1:c1', VERSIONS => 3}
COLUMN                                           CELL                                                                                                                                         
 cf1:c1                                          timestamp=1568862065386, value=v2                                                                                                            
 cf1:c1                                          timestamp=1568861991713, value=v1                                                                                                            
2 row(s) in 0.0090 seconds

hbase(main):048:0> put 'custom-version-tbl',100,'cf1:c1','v3'
0 row(s) in 0.0070 seconds

hbase(main):049:0> get 'custom-version-tbl',100 , {COLUMN => 'cf1:c1', VERSIONS => 3}
COLUMN                                           CELL                                                                                                                                         
 cf1:c1                                          timestamp=1568862117673, value=v3                                                                                                            
 cf1:c1                                          timestamp=1568862065386, value=v2                                                                                                            
 cf1:c1                                          timestamp=1568861991713, value=v1                                                                                                            
3 row(s) in 0.0060 seconds

hbase(main):050:0> put 'custom-version-tbl',100,'cf1:c1','v6'
0 row(s) in 0.0070 seconds

hbase(main):051:0> get 'custom-version-tbl',100 , {COLUMN => 'cf1:c1', VERSIONS => 3}
COLUMN                                           CELL                                                                                                                                         
 cf1:c1                                          timestamp=1568862124930, value=v6                                                                                                            
 cf1:c1                                          timestamp=1568862117673, value=v3                                                                                                            
 cf1:c1                                          timestamp=1568862065386, value=v2                                                                                                            
3 row(s) in 0.0220 seconds

hbase(main):052:0> get 'custom-version-tbl'

ERROR: wrong number of arguments (1 for 2)

Get row or cell contents; pass table name, row, and optionally
a dictionary of column(s), timestamp, timerange and versions. Examples:

  hbase> get 'ns1:t1', 'r1'
  hbase> get 't1', 'r1'
  hbase> get 't1', 'r1', {TIMERANGE => [ts1, ts2]}
  hbase> get 't1', 'r1', {COLUMN => 'c1'}
  hbase> get 't1', 'r1', {COLUMN => ['c1', 'c2', 'c3']}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMESTAMP => ts1}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMERANGE => [ts1, ts2], VERSIONS => 4}
  hbase> get 't1', 'r1', {COLUMN => 'c1', TIMESTAMP => ts1, VERSIONS => 4}
  hbase> get 't1', 'r1', {FILTER => "ValueFilter(=, 'binary:abc')"}
  hbase> get 't1', 'r1', 'c1'
  hbase> get 't1', 'r1', 'c1', 'c2'
  hbase> get 't1', 'r1', ['c1', 'c2']
  hbase> get 't1', 'r1', {COLUMN => 'c1', ATTRIBUTES => {'mykey'=>'myvalue'}}
  hbase> get 't1', 'r1', {COLUMN => 'c1', AUTHORIZATIONS => ['PRIVATE','SECRET']}
  hbase> get 't1', 'r1', {CONSISTENCY => 'TIMELINE'}
  hbase> get 't1', 'r1', {CONSISTENCY => 'TIMELINE', REGION_REPLICA_ID => 1}

Besides the default 'toStringBinary' format, 'get' also supports custom formatting by
column.  A user can define a FORMATTER by adding it to the column name in the get
specification.  The FORMATTER can be stipulated: 

 1. either as a org.apache.hadoop.hbase.util.Bytes method name (e.g, toInt, toString)
 2. or as a custom class followed by method name: e.g. 'c(MyFormatterClass).format'.

Example formatting cf:qualifier1 and cf:qualifier2 both as Integers: 
  hbase> get 't1', 'r1' {COLUMN => ['cf:qualifier1:toInt',
    'cf:qualifier2:c(org.apache.hadoop.hbase.util.Bytes).toInt'] } 

Note that you can specify a FORMATTER by column only (cf:qualifier).  You cannot specify
a FORMATTER for all columns of a column family.
    
The same commands also can be run on a reference to a table (obtained via get_table or
create_table). Suppose you had a reference t to table 't1', the corresponding commands
would be:

  hbase> t.get 'r1'
  hbase> t.get 'r1', {TIMERANGE => [ts1, ts2]}
  hbase> t.get 'r1', {COLUMN => 'c1'}
  hbase> t.get 'r1', {COLUMN => ['c1', 'c2', 'c3']}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMESTAMP => ts1}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMERANGE => [ts1, ts2], VERSIONS => 4}
  hbase> t.get 'r1', {COLUMN => 'c1', TIMESTAMP => ts1, VERSIONS => 4}
  hbase> t.get 'r1', {FILTER => "ValueFilter(=, 'binary:abc')"}
  hbase> t.get 'r1', 'c1'
  hbase> t.get 'r1', 'c1', 'c2'
  hbase> t.get 'r1', ['c1', 'c2']
  hbase> t.get 'r1', {CONSISTENCY => 'TIMELINE'}
  hbase> t.get 'r1', {CONSISTENCY => 'TIMELINE', REGION_REPLICA_ID => 1}


hbase(main):053:0> put 'custom-version-tbl',100,'cf1:c1','v6','cf2:c1','vc1'

ERROR: no method 'add' for arguments (org.jruby.java.proxies.ArrayJavaProxy,org.jruby.java.proxies.ArrayJavaProxy,org.jruby.RubyString,org.jruby.java.proxies.ArrayJavaProxy) on Java::OrgApacheHadoopHbaseClient::Put
  available overloads:
    (byte[],java.nio.ByteBuffer,long,java.nio.ByteBuffer)
    (byte[],byte[],long,byte[])

Put a cell 'value' at specified table/row/column and optionally
timestamp coordinates.  To put a cell value into table 'ns1:t1' or 't1'
at row 'r1' under column 'c1' marked with the time 'ts1', do:

  hbase> put 'ns1:t1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value', ts1
  hbase> put 't1', 'r1', 'c1', 'value', {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {VISIBILITY=>'PRIVATE|SECRET'}

The same commands also can be run on a table reference. Suppose you had a reference
t to table 't1', the corresponding command would be:

  hbase> t.put 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}


hbase(main):054:0> describe 'custom-version-tbl'
Table custom-version-tbl is ENABLED                                                                                                                                                           
custom-version-tbl                                                                                                                                                                            
COLUMN FAMILIES DESCRIPTION                                                                                                                                                                   
{NAME => 'cf1', BLOOMFILTER => 'ROW', VERSIONS => '3', IN_MEMORY => 'false', KEEP_DELETED_CELLS => 'FALSE', DATA_BLOCK_ENCODING => 'NONE', TTL => 'FOREVER', COMPRESSION => 'NONE', MIN_VERSIO
NS => '0', BLOCKCACHE => 'true', BLOCKSIZE => '65536', REPLICATION_SCOPE => '0'}                                                                                                              
{NAME => 'cf2', BLOOMFILTER => 'ROW', VERSIONS => '1', IN_MEMORY => 'false', KEEP_DELETED_CELLS => 'FALSE', DATA_BLOCK_ENCODING => 'NONE', TTL => 'FOREVER', COMPRESSION => 'NONE', MIN_VERSIO
NS => '0', BLOCKCACHE => 'true', BLOCKSIZE => '65536', REPLICATION_SCOPE => '0'}                                                                                                              
{NAME => 'cf3', BLOOMFILTER => 'ROW', VERSIONS => '1', IN_MEMORY => 'false', KEEP_DELETED_CELLS => 'FALSE', DATA_BLOCK_ENCODING => 'NONE', TTL => 'FOREVER', COMPRESSION => 'NONE', MIN_VERSIO
NS => '0', BLOCKCACHE => 'true', BLOCKSIZE => '65536', REPLICATION_SCOPE => '0'}                                                                                                              
3 row(s) in 0.0470 seconds

hbase(main):055:0> put 'custom-version-tbl',100,'cf1:c1','v6','cf2:c1','vc1'

ERROR: no method 'add' for arguments (org.jruby.java.proxies.ArrayJavaProxy,org.jruby.java.proxies.ArrayJavaProxy,org.jruby.RubyString,org.jruby.java.proxies.ArrayJavaProxy) on Java::OrgApacheHadoopHbaseClient::Put
  available overloads:
    (byte[],java.nio.ByteBuffer,long,java.nio.ByteBuffer)
    (byte[],byte[],long,byte[])

Put a cell 'value' at specified table/row/column and optionally
timestamp coordinates.  To put a cell value into table 'ns1:t1' or 't1'
at row 'r1' under column 'c1' marked with the time 'ts1', do:

  hbase> put 'ns1:t1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value'
  hbase> put 't1', 'r1', 'c1', 'value', ts1
  hbase> put 't1', 'r1', 'c1', 'value', {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}
  hbase> put 't1', 'r1', 'c1', 'value', ts1, {VISIBILITY=>'PRIVATE|SECRET'}

The same commands also can be run on a table reference. Suppose you had a reference
t to table 't1', the corresponding command would be:

  hbase> t.put 'r1', 'c1', 'value', ts1, {ATTRIBUTES=>{'mykey'=>'myvalue'}}


hbase(main):056:0> 
